# -*- coding:utf-8 -*-
""" JZ—46 圆圈中最后剩下的元素
题目描述：
        让小朋友们围成一个大圈。然后,他随机指定一个数 `m`，让编号为 `0` 的小朋友开始报数。
        每次喊到 `m-1` 的那个小朋友要出列，并且不再回到圈中，从他的下一个小朋友开始,
        继续 `0...m-1` 报数....这样下去....直到剩下最后一个小朋友，如果没有小朋友，请返回 `-1`。

例子：
	输入: 5，3
	返回值: 3
"""

"""
n:小孩个数，编号0,1,...,n-1
m:指定的数

小孩围成一圈，编号为0的小孩开始报数，喊到m-1的小孩出列，余下的小孩重新围成一圈
重该小孩的下一个小孩开始报数。。

[递归]：
1，假设f(n, m) 表示最终留下元素的序号。比如上例子中表示为:f(5,3) = 3
2，首先，长度为 n 的序列会先删除第 m % n 个元素，然后剩下一个长度为 n - 1 的序列。
3，当我们知道了 f(n - 1, m) 对应的答案 x 之后，我们也就可以知道，长度为 n 的序列最后一个删除的元素，
4，应当是从 m % n 开始数的第 x 个元素。因此有 f(n, m) = (m % n + x) % n = (m + x) % n。

当n等于1时，f(1,m) = 0

[简化]：
    f[1] = 0
    f[2] = (f[1] + m)%2
    f[3] = (f[2] + m)%3
    ...
    f[n] = (f[n-1] + m)%n
"""

class Solution:
    def LastRemaining_Solution(self, n, m):
        if n <= 0:
            return -1
        f = 0
        for i in range(2, n+1):
            f = (f + m) % i
        return f
